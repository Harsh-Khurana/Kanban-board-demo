{"version":3,"sources":["components/Event.js","containers/App.js","serviceWorker.js","index.js"],"names":["Event","props","className","onDragOver","onDrop","header","addTodo","type","placeholder","onKeyDown","children","App","state","tasks","event","preventDefault","onDragStart","text","console","log","dataTransfer","setData","status","newText","getData","filter","task","setState","addTaskHandler","target","value","length","key","newTasks","push","todo","doing","done","this","forEach","i","draggable","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mPAgBeA,G,MAZD,SAAAC,GACb,OACC,yBAAKC,UAAU,QAAQC,WAAYF,EAAME,WAAYC,OAAQH,EAAMG,QAClE,yBAAKF,UAAU,UAAUD,EAAMI,QAC9BJ,EAAMK,QACN,2BAAOC,KAAK,OAAOC,YAAY,sBAAsBC,UAAWR,EAAMK,UACrE,KACDL,EAAMS,YCPWC,E,4MACpBC,MAAM,CACLC,MAAM,I,EAMPV,WAAa,SAAAW,GACZA,EAAMC,kB,EAIPC,YAAc,SAACF,EAAMG,GACpBC,QAAQC,IAAI,cAAcF,GAC1BH,EAAMM,aAAaC,QAAQ,QAAQJ,I,EAIpCb,OAAS,SAACU,EAAMQ,GACf,IAAIC,EAAUT,EAAMM,aAAaI,QAAQ,SACrCX,EAAQ,EAAKD,MAAMC,MAAMY,QAAO,SAAAC,GAInC,OAHGA,EAAKT,MAAMM,IACbG,EAAKJ,OAASA,GAERI,KAER,EAAKC,SAAL,2BAAkB,EAAKf,OAAvB,IAA6BC,Y,EAK9Be,eAAiB,SAACd,GACjB,GAAGA,EAAMe,OAAOC,MAAMC,OAAO,GAAiB,UAAZjB,EAAMkB,IAAc,CACrD,IAAIC,EAAW,EAAKrB,MAAMC,MAC1BoB,EAASC,KAAK,CAACjB,KAAKH,EAAMe,OAAOC,MAAOR,OAAO,SAC/C,EAAKK,SAAS,CAAEd,MAAMoB,IACtBnB,EAAMe,OAAOC,MAAM,K,uDAIZ,IAAD,OACHjB,EAAQ,CACXsB,KAAK,GACLC,MAAM,GACNC,KAAK,IAeN,OAZAC,KAAK1B,MAAMC,MAAM0B,SAAQ,SAACb,EAAKc,GAC9B3B,EAAMa,EAAKJ,QAAQY,KAClB,yBAAKhC,UAAU,OACdc,YAAe,SAAAF,GAAK,OAAE,EAAKE,YAAYF,EAAMY,EAAKT,OAClDe,IAAKN,EAAKT,KAAKuB,EACfC,WAAS,GAERf,EAAKT,UAMR,yBAAKf,UAAU,OACd,kBAAC,EAAD,CAAOI,QAASgC,KAAKV,eAAgBvB,OAAO,SAASQ,EAAMsB,MAC3D,kBAAC,EAAD,CACC9B,OAAO,QACPF,WAAY,SAAAW,GAAK,OAAE,EAAKX,WAAWW,IACnCV,OAAQ,SAAAU,GAAK,OAAE,EAAKV,OAAOU,EAAM,WAAWD,EAAMuB,OACnD,kBAAC,EAAD,CACC/B,OAAO,OACPF,WAAY,SAAAW,GAAK,OAAE,EAAKX,WAAWW,IACnCV,OAAQ,SAAAU,GAAK,OAAE,EAAKV,OAAOU,EAAM,UAAUD,EAAMwB,W,GAtErBK,IAAMC,WCQnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,a","file":"static/js/main.9ffb2436.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//\tSince this is a small app hence i haven't implemented many components but have kept it\r\n//  as simple as possible\r\nconst Event = props =>{\r\n\treturn(\r\n\t\t<div className=\"Event\" onDragOver={props.onDragOver} onDrop={props.onDrop}>\r\n\t\t\t<div className=\"header\">{props.header}</div>\r\n\t\t\t{props.addTodo?\r\n\t\t\t\t<input type=\"text\" placeholder=\"Type New To-do here\" onKeyDown={props.addTodo}/>\r\n\t\t\t\t:null}\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Event;","import React from 'react';\nimport './App.css';\nimport Event from '../components/Event';\n\nexport default class App extends React.Component{\n\tstate={\n\t\ttasks:[]\n\t}\n\n\t// All dragable fns \n\n\t// Fn to allow things to be dropped over\n\tonDragOver = event =>{\n\t\tevent.preventDefault();\n\t}\n\n\t// Fn that allows content state to be saved as we are dragging\n\tonDragStart = (event,text) =>{\n\t\tconsole.log('dragstart: ',text);\n\t\tevent.dataTransfer.setData('myKey',text);\n\t}\n\n\t// Fn that is run whenever drop is finally made\n\tonDrop = (event,status) =>{\n\t\tlet newText = event.dataTransfer.getData('myKey');\n\t\tlet tasks = this.state.tasks.filter(task=>{\n\t\t\tif(task.text==newText){\n\t\t\t\ttask.status = status;\n\t\t\t}\n\t\t\treturn task;\n\t\t})\n\t\tthis.setState({...this.state,tasks});\n\t}\n\n\t// This fn is used to add task in to-do section when input is \n\t// typed and enter is pressed\n\taddTaskHandler = (event) =>{\n\t\tif(event.target.value.length>0 && event.key==='Enter'){\n\t\t\tlet newTasks = this.state.tasks;\n\t\t\tnewTasks.push({text:event.target.value, status:\"todo\"});\n\t\t\tthis.setState({\ttasks:newTasks });\n\t\t\tevent.target.value='';\n\t\t}\n\t}\n\n\trender(){\n\t\tlet tasks = {\n\t\t\ttodo:[],\n\t\t\tdoing:[],\n\t\t\tdone:[]\n\t\t}\n\n\t\tthis.state.tasks.forEach((task,i)=>{\n\t\t\ttasks[task.status].push(\n\t\t\t\t<div className=\"card\"\n\t\t\t\t\tonDragStart = {event=>this.onDragStart(event,task.text)}\n\t\t\t\t\tkey={task.text+i}\n\t\t\t\t\tdraggable\n\t\t\t\t>\n\t\t\t\t\t{task.text}\n\t\t\t\t</div>\n\t\t\t);\n\t\t})\n\n\t\treturn(\n\t\t\t<div className=\"App\">\n\t\t\t\t<Event addTodo={this.addTaskHandler} header=\"To-Do\">{tasks.todo}</Event>\n\t\t\t\t<Event \n\t\t\t\t\theader=\"Doing\" \n\t\t\t\t\tonDragOver={event=>this.onDragOver(event)}\n\t\t\t\t\tonDrop={event=>this.onDrop(event,\"doing\")}>{tasks.doing}</Event>\n\t\t\t\t<Event \n\t\t\t\t\theader=\"Done\" \n\t\t\t\t\tonDragOver={event=>this.onDragOver(event)}\n\t\t\t\t\tonDrop={event=>this.onDrop(event,\"done\")}>{tasks.done}</Event>\n\t\t\t</div>\n\t\t);\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}